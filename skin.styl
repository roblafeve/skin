// SKIN CONFIGURATION
// To apply a skin to an element, use `@extend $skin-name`.
// To utilize a skin variant, `@extend $skin-name-variant`.

// SKIN BASE
// Shared CSS should be placed inside `skin_base` and will be extend by each `skin`.
// Do not confuse with `defaults`.
$skin-base
  border-width      1px
  border-style      solid
  background-repeat no-repeat
  transition        all 0.25s ease-in-out
  // background-image: linear-gradient(rgba(white, 0.2), rgba(black, 0.1))
  // background-image  linear-gradient(rgba(white, 0), rgba(black, 0.05))

skins = {

  // SKIN DEFAULT
  // Default skin configuration options are placed in `skin_default`.
  // Unless specified on a specific `skin`, these options are used.
  default: {
    color_base: whitesmoke
    color_adjust: 0
    border_adjust: -10
    text_adjust: -40

    // DEFAULT VARIANTS
    variants: {
      light: {
        color_adjust: 40
      }
      dark: {
        color_adjust: -5
        text_adjust: 40
      }
    }

  }

  // SKINS
  primary: {
    color_base: orange
  }
  secondary: {
    color_base: #333
  }
  tertiary: {
    variants: {
      dark: {
        text_adjust: -40
      }
    }
  }

}

for skin_name, skin in skins
  unless skin_name is "default"
    
    merged_skins      = merge({}, skins.default, skin)
    merged_variants   = merge({}, skins.default.variants, skin.variants)
    merged_attributes = merge({}, skins.default.attributes, skin.attributes)

    // OPTIONS
    color_base    = merged_skins.color_base

    // COLOR ADJUST
    color_adjust       = merged_skins.color_adjust
    if color_adjust and color_adjust > 0 
      background_color = lighten(color_base, color_adjust)
    else if color_adjust and color_adjust < 0 
      background_color = darken(color_base, color_adjust*-1)
    else
      background_color = color_base

    // BORDER ADJUST
    border_adjust  = merged_skins.border_adjust
    if border_adjust and border_adjust > 0 
      border_color = lighten(color_base, border_adjust)
    else if border_adjust and border_adjust < 0 
      border_color = darken(color_base, border_adjust*-1)
    else
      border_color = color_base

    // TEXT ADJUST
    text_adjust  = merged_skins.text_adjust
    if text_adjust and text_adjust > 0 
      text_color = lighten(color_base, text_adjust)
    else if text_adjust and text_adjust < 0 
      text_color = darken(color_base, text_adjust*-1)
    else
      text_color = color_base

    $skin-{skin_name}
      @extend $skin-base

      background-color background_color
      border-color border_color
      color text_color

      for attribute_name, attribute in merged_attributes
        {attribute_name} attribute

    for variant_name, variant in merged_variants
      $skin-{skin_name}-{variant_name}
        @extend $skin-base
        merged_variant = merge({}, skins.default.variants[variant_name], variant)
        unless typeof(merged_variant) == "object"
          {merged_variant}

        // OPTIONS
        if merged_variant['color_base']
          color_base    = merged_variant['color_base']

        // COLOR ADJUST
        if merged_variant['color_adjust']
          color_adjust       = merged_variant['color_adjust']
        if color_adjust and color_adjust > 0 
          background_color = lighten(color_base, color_adjust)
        else if color_adjust and color_adjust < 0 
          background_color = darken(color_base, color_adjust*-1)
        else
          background_color = color_base

        // BORDER ADJUST
        if merged_variant['border_adjust']
          border_adjust = merged_variant['border_adjust']
        if border_adjust and border_adjust > 0 
          border_color = lighten(background_color, border_adjust)
        else if border_adjust and border_adjust < 0 
          border_color = darken(background_color, border_adjust*-1)
        else
          border_color = background_color
        
        // TEXT ADJUST
        if merged_variant['text_adjust']
          text_adjust   = merged_variant['text_adjust']
        if text_adjust and text_adjust > 0 
          text_color = lighten(background_color, text_adjust)
        else if text_adjust and text_adjust < 0 
          text_color = darken(background_color, text_adjust*-1)
        else
          text_color = background_color

        background-color background_color
        border-color border_color
        color text_color

        // merged_attributes = merge({}, skins.default.variants[variant_name]attributes, variant.attributes)
        // for attribute_name, attribute in merged_attributes
        //   merged_attribute = merge({}, skins.default.variants[variant_name]attributes[attribute_name], attribute)
        //   {merged_attribute}


.thing-1a
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-primary-light
.thing-1b
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-primary
.thing-1c
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-primary-dark

.thing-2a
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-secondary-light
.thing-2b
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-secondary
.thing-2c
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-secondary-dark

.thing-3a
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-tertiary-light
.thing-3b
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-tertiary
.thing-3c
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-tertiary-dark