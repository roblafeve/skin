color-base      = whitesmoke
color-primary   = teal
color-secondary = goldenrod
color-tertiary  = yellowgreen

// SKIN CONFIGURATION
// To apply a skin to an element, use `@extend $skin-name`.
// To utilize a skin variant, `@extend $skin-name-variant` (not in place currently).

// SKIN BASE
// Shared CSS should be placed inside `skin_base` and will be extend by each `skin`.
// Do not confuse with `defaults`.
skin_base = {
  border-width:      1px
  border-style:      solid
  background-repeat: no-repeat
  transition:        all 0.25s ease-in-out
  background-image:  linear-gradient(rgba(white, 0), rgba(black, 0.05))
}

// SKIN DEFAULT
// Default skin configuration options are placed in `skin_default`.
// Unless specified on a specific `skin`, these options are used.
skin_default = {
  base_color:       color-base
  border_luminance: dark
  border_contrast:  10
  text_luminance:   light
  text_contrast:    30
  variant: {
    light: {
      base_color_adjust: 10
      border_contrast:  5
    }
    dark: {
      base_color_adjust: -10
      border_contrast:  0
    }
  }
}

// SKINS
skin = {
  primary: {
    text_luminance: dark
  }
  secondary: {
    base_color: color-secondary
  }
  tertiary: {
    base_color: color-tertiary
    text_luminance: dark
    text_contrast:  10
  }
}

// GENERATE SKIN BASE
$skin-base
  for key, value in skin_base
    {key}: value

// GENERATE SKINS
for name, value in skin
  merged             = merge({}, skin_default, skin[name])
  base_color         = merged['base_color']
  border_luminance   = merged['border_luminance']
  border_contrast    = merged['border_contrast']
  text_luminance     = merged['text_luminance']
  text_contrast      = merged['text_contrast']
  attributes         = merged.attributes
  variants           = merged.variant
  $skin-{name}
    @extend $skin-base
    background-color base_color
    border-color     lighten(base_color, border_contrast) if border_luminance is light
    border-color     darken(base_color, border_contrast) if border_luminance is dark
    color            lighten(base_color, text_contrast) if text_luminance is light
    color            darken(base_color, text_contrast) if text_luminance is dark
    for key, value in attributes
      {key}: value if attributes

  for variant, option in variants
    variant_merged     = merge({}, merged, variants[variant])
    base_color         = variant_merged['base_color']
    border_luminance   = variant_merged['border_luminance']
    border_contrast    = variant_merged['border_contrast']
    text_luminance     = variant_merged['text_luminance']
    text_contrast      = variant_merged['text_contrast']
    attributes         = variant_merged['attributes']
    variants           = variant_merged.variant
    base_color_adjust  = option['base_color_adjust']
    $skin-{name}-{variant}
      @extend $skin-base
      unless base_color_adjust
        base_color_adjust = 0
      if base_color_adjust >= 0
        base_color = lighten(base_color, base_color_adjust)
      else
        base_color = darken(base_color, base_color_adjust*-1)
      background-color base_color
      border-color     lighten(base_color, border_contrast) if border_luminance is light
      border-color     darken(base_color, border_contrast) if border_luminance is dark
      color            lighten(base_color, text_contrast) if text_luminance is light
      color            darken(base_color, text_contrast) if text_luminance is dark
      for key, value in attributes
        {key}: value if attributes


.thing-1a
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-primary-light
.thing-1b
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-primary
.thing-1c
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-primary-dark

.thing-2a
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-secondary-light
.thing-2b
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-secondary
.thing-2c
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-secondary-dark

.thing-3a
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-tertiary-light
.thing-3b
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-tertiary
.thing-3c
  &:before
    content 'Skin - ' attr(data-skin)
  @extend $skin-tertiary-dark