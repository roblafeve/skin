skins = {
  default: {
    color_base: #777777
    color_adjust: 0
    border_adjust: -20
    text_adjust: 50
    attributes: {
      top: 0
    }
    variants: {
      alpha: {
        color_adjust: 20
      }
      beta: {
        color_adjust: -10
      }
      gamma: {
        color_adjust: -20
      }
    }
  }
  primary: {
    color_base: purple
    attributes: {
      position: absolute
    }
    variants: {
      light: {
        color_adjust: 5
      }
      dark: {}
    }
  }
  secondary: {
    color_base: orange
  }
}

for skin_name, skin in skins
  unless skin_name is "default"
    
    merged_skins      = merge({}, skins.default, skin)
    merged_variants   = merge({}, skins.default.variants, skin.variants)
    merged_attributes = merge({}, skins.default.attributes, skin.attributes)

    // OPTIONS
    color_base    = merged_skins.color_base

    // COLOR ADJUST
    color_adjust       = merged_skins.color_adjust
    if color_adjust and color_adjust > 0 
      background_color = lighten(color_base, color_adjust)
    else if color_adjust and color_adjust < 0 
      background_color = darken(color_base, color_adjust*-1)
    else
      background_color = color_base

    // BORDER ADJUST
    border_adjust  = merged_skins.border_adjust
    if border_adjust and border_adjust > 0 
      border_color = lighten(color_base, border_adjust)
    else if border_adjust and border_adjust < 0 
      border_color = darken(color_base, border_adjust*-1)
    else
      border_color = color_base

    // TEXT ADJUST
    text_adjust  = merged_skins.text_adjust
    if text_adjust and text_adjust > 0 
      text_color = lighten(color_base, text_adjust)
    else if text_adjust and text_adjust < 0 
      text_color = darken(color_base, text_adjust*-1)
    else
      text_color = color_base

    .skin-{skin_name}

      background-color background_color
      border-color border_color
      color text_color

      for attribute_name, attribute in merged_attributes
        {attribute_name} attribute

    for variant_name, variant in merged_variants
      .skin-{skin_name}-{variant_name}
        merged_variant = merge({}, skins.default.variants[variant_name], variant)
        unless typeof(merged_variant) == "object"
          {merged_variant}

        // OPTIONS
        if merged_variant['color_base']
          color_base    = merged_variant['color_base']

        // COLOR ADJUST
        if merged_variant['color_adjust']
          color_adjust       = merged_variant['color_adjust']
        if color_adjust and color_adjust > 0 
          background_color = lighten(color_base, color_adjust)
        else if color_adjust and color_adjust < 0 
          background_color = darken(color_base, color_adjust*-1)
        else
          background_color = color_base

        // BORDER ADJUST
        if merged_variant['border_adjust']
          border_adjust = merged_variant['border_adjust']
        if border_adjust and border_adjust > 0 
          border_color = lighten(background_color, border_adjust)
        else if border_adjust and border_adjust < 0 
          border_color = darken(background_color, border_adjust*-1)
        else
          border_color = background_color
        
        // TEXT ADJUST
        if merged_variant['text_adjust']
          text_adjust   = merged_variant['text_adjust']
        if text_adjust and text_adjust > 0 
          text_color = lighten(background_color, text_adjust)
        else if text_adjust and text_adjust < 0 
          text_color = darken(background_color, text_adjust*-1)
        else
          text_color = background_color

        background-color background_color
        border-color border_color
        color text_color

      // merged_variant_attributes = merge({}, skins.default.variants[variant_name]attributes, skin.variants[variant_name]attributes)
      // for attribute_name, attribute in merged_variant_attributes
      //   merged_attribute = merge({}, skins.default.variants[variant_name]attributes[attribute_name], attribute)
      //   {merged_attribute}

